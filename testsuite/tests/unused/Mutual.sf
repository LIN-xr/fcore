# let rec = /\A. (fix (rec : ((A -> A) -> A -> A) -> (A -> A)). \f. f (rec f)) : forall A . ((A -> A) -> A -> A) -> A -> A in
# let recur = /\A. (fix (recur : ((Int -> A) -> A) -> A). \f. f (\(n : Int). recur f)) : forall A. ((Int -> A) -> A) -> A in
# recur (Int -> Int) (\(fact : Int -> Int -> Int). \(n : Int). if0 n then 1 else n * fact 0 (n-1)) 10

let rec = /\A. (fix (rec : ((A -> A) -> A -> A) -> (A -> A)). \f. f (rec f)) in
let recur = /\A. (fix (recur : ((Int -> A) -> A) -> A). \f. f (\(n : Int). recur f)) in
recur (Int -> Int) (\(fact : Int -> Int -> Int). \(n : Int). if0 n then 1 else n * fact 0 (n-1)) 10
